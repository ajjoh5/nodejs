{"id":"LoLO8yXY","nodes":[{"name":"8 reasons why you should use NodeJS","url":"8-reasons-why-you-should-use-nodejs","properties":[{"name":"meta-description","description":"The meta-description must contain the primary keyword / phrase and be no longer than 156 characters","value":"WalMart, PayPal and LinkedIn are investing heavily in NodeJS, but why should you care? What can NodeJS do for you? I'll tell you why it matters."},{"name":"page-title","description":"The page title must contain the primary keyword / phrase and be no longer than 70 characters","value":"8 Reasons Why You Should Use NodeJS"},{"name":"more-text","description":"","value":"WalMart, PayPal and LinkedIn are investing heavily in NodeJS, but why should you care? What can NodeJS do for you? I'll tell you why it matters."},{"name":"featured-image","description":"","value":"https://nodejs.org/static/images/logos/nodejs-green.png"},{"name":"author","description":"","value":"Adam Johnstone"},{"name":"publish-date","description":"","value":"8:00pm September 3rd 2015"}],"contents":[{"name":"article-text","value":"<p>NodeJS has been the poster pinup \"new kid on the block\" for many tech startups across the globe and has been touted as the \"best new framework today that allows you to create web based software faster and cheaper than ever before\".</p><p>I don't buy it, so I went behind the hype and the crap to hone in on what NodeJS does really well, and maybe not so well, which led me to wrap-up with my top 8 reasons why you should be starting to experiment and use Node in your business right now.</p><p>However firstly, let's answer the question on everyone's lips...</p><h1>Why Should I Care About NodeJS?</h1><p>I get it, your busy and this could be just another tech innovation that's trying to get your attention, but is NodeJS something you really need to read more into? </p><p>What value does it offer (if any) to you and your business?</p><p>For starters - WalMart, PayPal, LinkedIn, etc have all made the decision to build on and invest heavily in NodeJS (see <a href=\"http://venturebeat.com/2012/01/24/why-walmart-is-using-node-js/\" rel=\"nofollow\" target=\"_blank\">Walmart article here</a>) and I get the feeling they know something that I don't.</p><p>I also had my reservations about Node, so for your reference I've compiled a quick list of the common questions I've been asked and answered below:</p><p><strong>Quesion :</strong>&nbsp;What new value does NodeJS offer to us?<br><strong>Adam's Answer :</strong>&nbsp;Less time to develop working prototypes and solutions. I'm a .NET developer initially, and in 3 days of NodeJS I had developed a working prototype that would have taken me 1 week to develop in .NET.&nbsp;</p><p><strong>Question : </strong>Why should I care about NodeJS?<br><strong>Adam's Answer : </strong>NodeJS is a light-weight framework that's gets things done quicker and cheaper. <br>                          Because it's light and there's plenty of \"pre written plugins ready to go\", you can utilise the framework to expand on ideas, build better experiences for your customers and you don't have to wait as long to test something in the market to gain feedback.</p><p><strong>Question</strong> : We are invested in .NET, so why should we move to a new tech like NodeJS?<br><strong>Adam's Answer : </strong>You shouldn't! Instead, invest in a constant cycle of tech innovation whereby you choose some smaller startup projects to trial NodeJS with. Do your due-diligence and really stress test it to make sure the strengths of NodeJS fit with your solution design. I'm sure once you see the benefits, it will become a staple in your business \"toolbelt\" so to speak.</p><p><strong>Question : </strong>How long will this take to learn?<br><strong>Adam's Answer : </strong>Not long at all, maybe 1-2 weeks tops because your web developers should already be using Javascript. In short, NodeJS is just \"javascript, but on the server side\".&nbsp;</p><h1>Top 8 Reasons Why you should use NodeJS</h1><h2><span style=\"background-color: black; border-radius: 2px; color: white; font-size: 2em; padding: 5px 10px;\">1.</span>&nbsp; It's Fast - It can do more hits with less resources</h2><p>NodeJS is fast - in fact it's really fast.</p><p>This website you are on right now is built on NodeJS and so far it's running from a server located in the USA, with 1 CPU Processor and 1 GB of ram.</p><p>More importantly, I've tested and confirmed that the average loading time is <strong>1.9</strong> seconds if nearly <br>                     12 Million people visited this site per day!</p><p>That's a fact - backed by the stats I ran numerous times on Blitz.io -&nbsp;<a href=\"https://www.dropbox.com/s/tx24ne0u0ca517y/node%20-%20node%20file%20based%20cms.pdf?dl=0\" rel=\"nofollow\" target=\"_blank\">View the PDF Results here</a>.</p><p><strong>The standout stats are as follows:</strong></p><ul><li><strong>How much traffic can it handle per day :</strong> 11,717,280 hits / day</li><li><strong>How many concurrent users can it handle (if 10% are active) : </strong>5830 users&nbsp;</li><li><strong>What's the average loading time every day : </strong>1.9 seconds</li><li><strong>What's the slowest loading time during peak times : </strong>4.5 seconds</li></ul><p><br></p><p>These figures aren't bad for starters, coupled with the fact it's costing me roughly $5 a month to run the website.</p><p>Also this site is only using NodeJS and possibly 8 or 10 plugins I installed from NPM (noting that none of the plugins are speed enhancers or cachers). These results are all raw NodeJS.</p><p>NodeJS is fast, and it doesn't require many resources to sustain a large amount of hits per day.</p><h2><span style=\"background-color: black; border-radius: 2px; color: white; font-size: 2em; padding: 5px 10px;\">2.</span>&nbsp; Great Plugins available, saving development time</h2><p>NPM (Node Package Manager) is a platform and website that allows you to download the greatest plugins and \"code I've already done before\" that has been uploaded and maintained by a thriving userbase to allow your developers to test, trial and pick code that already exists, so they don't have to re-invent the wheel all the time.</p><blockquote>\"Using NPM is like choosing to build a new car and having 90% of all the parts delivered and installed before your start.\"&nbsp;</blockquote><p><a href=\"https://www.npmjs.com\" rel=\"nofollow\" target=\"_blank\">Click here to Check out NPM for yourself</a></p><p>I'm using plugins like Express, PM2 just to name a few, and these alone have allowed me to build a fully functional CMS of my own in under 4 weeks part time.</p><p>Just like NuGET package manager in .NET, you basically run a command via the command line like the below:</p><pre class=\"language-javascript\"><code class=\"  language-javascript\" data-language=\"javascript\">npm install express --save</code></pre><p>And away you go... simples!</p><h2><span style=\"background-color: black; border-radius: 2px; color: white; font-size: 2em; padding: 5px 10px;\">3.</span>&nbsp; Javascript In the Back &amp; Javascript at the Front</h2><p>This was a by far one of the strongest realisations I came across when I realised the power that one language can have for small / medium / large / enterprise businesses.</p><blockquote>\"Imagine a world where you can hire a team of developers that all develop in the same language. <br><br>                     Imagine the front end developers reusing code that the backend developers originally built and distributed.<br><br>                     The cost savings, the collaboration, everyone talking the same language... <br><br>                     Brilliant!\"</blockquote><p>Even better, if you are planning to follow startup strategies and you want to get something off the ground quickly without expending too many resources, NodeJS could be the right answer.</p><p>You could hire a NodeJS developer who can build the backend as well as the UI (User Interface) frontend both in javascript, enabling you to get to market faster.</p><p>However don't be fooled, it's not all roses.</p><p>There is a major disadvantage to using NodeJS when it comes to needing&nbsp;some serious processing power. Javascript wasn't built for that purpose and it just doesn't \"cut the mustard\" so to speak.</p><p>But never fear - NodeJS is really good at handing off that kind of stuff and intelligently waiting for a response (i.e Asynchronous calling by default).</p><p>Imagine writing a website that calculates complex 3D renders (based on a few parameters) and displays a static picture of the render once the processing is complete.</p><p>NodeJS is probably not the right tool to do the complex rendering, but how about you create an intelligent API in NodeJS that sends off the request to perform the render?</p><p>You could pass off the rending to .NET, or a 3D rendering engine that spits back an image object that the NodeJS application is waiting for and displays on the web page once the render has finished.</p><p>All in all - NodeJS is a clever framework that allows you to write javascript everywhere. </p><p>I like the simplicity and the continuity of the same language everywhere, and the cost savings are obvious.</p><h2><span style=\"background-color: black; border-radius: 2px; color: white; font-size: 2em; padding: 5px 10px;\">4.</span>&nbsp; Asynchronous Code - The Power Behind NodeJS</h2><p>By default, NodeJS utilises Javascripts asynchronous code execution policy, but let's explain why that matters to you.</p><p>Say you want to build a web page that shows the full detail from 100 houses on sale, within your<br>                     real estate website, which gives you that data via an API call you need to make.</p><p>If you wrote that in .NET, we would typically write the 100 calls (which may all take 3 seconds to return) and we would shove them all in a \"GetLatest100Houses\" call that would take ~ 300 seconds.</p><p>In it's simplest form, NodeJS can call all 100 houses in ~ 3 seconds by making all 100 calls at once.</p><p>Straight away, NodeJS completes in ~ 3 seconds, .NET completes in ~ 300 seconds.</p><p>.NET developers, I know you can code in async requests to reduce the time, but the point I'm making here is that <strong>by default</strong>&nbsp;NodeJS forces you to think and code in an async nature, and .NET does not.</p><p>Argue all you like, I don't care - NodeJS feels like a better framework to me when it comes to handling multiple API calls and handling async results.</p><p>Further to the above, NodeJS would make the 100 calls, move on through the code and finish, but still have 100 outstanding \"wait for responses\" open.&nbsp;These 100 outstanding \"wait for responses\" open are then intelligently handled, firing when the time is right and the data has come back.</p><h2><span style=\"background-color: black; border-radius: 2px; color: white; font-size: 2em; padding: 5px 10px;\">5.</span>&nbsp; Releasing to Production is a Breeze</h2><p>When I want to release to production, I use <a href=\"https://github.com/pstadler/flightplan\" rel=\"nofollow\" target=\"_blank\">FlightPlan</a>, which is basically a deployment scripting framework (using JSON configurations) that allows me to upload all the latest files in GitHub to my website's server, by typing the following in the command line.</p><pre class=\"language-javascript\"><code class=\"  language-javascript\" data-language=\"javascript\">fly staging</code></pre><p>Yup, that's it! </p><p>The above makes flightplan go through my flightplan.js file, run my scripts, upload the website to my web server, restart my PM2 instances, all while I go grab a coffee!</p><p>.NET has similar build scripts, whether you're using Jenkins and Nant or Visual Studio's Continuous Integration - the difference I found is that I set up fly in around 15 minutes, and it's super easy to run when I need to run it, nuff said!</p><h2><span style=\"background-color: black; border-radius: 2px; color: white; font-size: 2em; padding: 5px 10px;\">6.</span>&nbsp; Building &amp; Releasing API's are Easy and Flexible</h2><p>I started off building API's in HapiJS and then moved into ExpressJS because I found Hapi too restrictive and inflexible when it came to Custom API URLs.</p><p>A shout out to the WalMart developers - If you can show me a better way to setup Hapi for what I want it to do,&nbsp;I'm happy to get on a call and run through it!</p><p>In short, building API's are super simple and very light-weight compared to developing API's in .NET's MVC stack.</p><p>I've spent the last 2 years building enterprise API's for a super successful large Australian company in .NET's MVC stack.</p><p>Had I come across NodeJS earlier - I would have switched across earlier. The advantages far outweigh the disadvantages for me.</p><p>For example, creating an API in .NET using the Entity Framework / MVC Models / and mapper classes could take me the better part of 3 - 5 days (compared to a novice who may take 2-3 weeks).</p><p>In comparison, if I built the same API in NodeJS my estimate would be around 2 - 3 days - and the end solution would be lighter, easier to maintain and highly updateable in future.</p><p>For me personally though, I love the ability to create custom URL's for API endpoints as well as using the \"/?*\" setting for generic parameters in ExpressJS (see below).</p><pre class=\"language-javascript\"><code class=\"  language-javascript\" data-language=\"javascript\">app.get('/api/?*' function (req, res) {\n    //code in here\n});</code></pre><p>The above code allows me to get all Urls starting with \"/api/\" containing 0 to many additional url parameters afterwards.</p><p>Meaning I can write one function that catches \"/api/myapi\", \"/api/v2/myapi\", \"/api/v3/myapi/params1\", all of which we can pass off to other functions dynamically without writing much code. And it's fast!</p><p>When I attempt the same in .NET... well that's another story.</p><h2><span style=\"background-color: black; border-radius: 2px; color: white; font-size: 2em; padding: 5px 10px;\">7.</span>&nbsp; NodeJS is easy to Learn / Large Support Base</h2><p>NodeJS was easy to learn for me directly due to the wealth of online resources and tutorials available.</p><p>It was a familiar experience for me as a .NET developer, because when I would go to google and search for a particular problem I'm having in NodeJS - someone, somewhere out in internet land had already solved it and posted a blog about it.</p><p><strong>See below for a few examples of resources I found with a Quick Google Search:</strong></p><ul><li><a href=\"http://nodeschool.io\" rel=\"nofollow\" target=\"_blank\">http://nodeschool.io</a> - Offering great tutorials 10+ world languages</li><li><a href=\"http://howtonode.org\" rel=\"nofollow\" target=\"_blank\">http://howtonode.org</a> - A highly ranked blog of great NodeJS tutorials</li><li><a href=\"https://www.youtube.com/results?search_query=nodejs+tutorials&amp;page=&amp;utm_source=opensearch\" rel=\"nofollow\" target=\"_blank\">https://www.youtube.com/results?search_query=nodejs+tutorials</a>&nbsp;(search for&nbsp;nodejs tutorials) - Lot's of great \"NodeJS how to videos\"</li></ul><p>Once you wrap your head around the asynchronous coding practices, I belive that NodeJS is a very easy and forgiving language to learn and share your experiences with, afterall it's just javascript!</p><p>You can create an object in NodeJS, and the add fields to it on the fly, unlike .NET where you need to create a class or inherit an object of a particular type to ensure you can access the fields (see below).</p><pre class=\"language-javascript\"><code class=\"  language-javascript\" data-language=\"javascript\">var myWebPage = {\n    title : 'My Web Title',\n    author : 'Adam Johnstone'\n};\n\nmyWebPage.NewField_2 = 'Field I just added';\n//doesn't error here\n\nconsole.log(myWebPage.NewField_2);\n// returns the newly added field's value called 'NewField_2'\n// also, this object can be passed between methods and it will still know about the\n// 'NewField_2' and contain a value for it.</code></pre><h2><span style=\"background-color: black; border-radius: 2px; color: white; font-size: 2em; padding: 5px 10px;\">8.</span>&nbsp; make Changes directly in Live without Recompile</h2><p>While I never advocate this, the advantage of the above is attractive in a fast moving business that demands things to be patched and fixed straight away.</p><p>For reference - I was writing an API that needed to connect to 3 other API's, intelligently merge and cache the results in a JSON file, followed by a requirement to store that file only if the delta was different to the previous cached versions. Also managing older versions was a priority just in case the 3 original API's returned null data sets, meaning that the new cached JSON file would contain no data and possibly an older version of the cache needed to be restored temporarily while the issue was resolved.</p><p>The above is a mouthful - and&nbsp;I hit one snag during the deployment process.</p><p>I had released a bug unintentionally that needed a few lines of code to be changed for the live system to work as intended.</p><p>I knew exactly where the lines of code where, however I felt uneasy about re-releasing a now live application, with a new version over the top. I wanted to patch the application to reduce the risk.</p><p>So what did I do? I edited the live javascript file manually, patched the file with the changes and quickly restarted the API website and ran my tests.</p><p>Sure enough the code change worked and I didn't need to redeploy the entire site.</p><p>While in almost 90% of cases I would never do this - I could see the advantage to updating live code with a \"patch style mindset\" so that it could be done at lightning speed.</p><h1>Top 8 - Summary</h1><p>In summary - NodeJS is now a framework I'm heavily investing in and I would urge you to do the same.</p><p>I recommend using it as much as possible in your business when trying to leverage all of it's advantages whilst you plan to avoid it's weaknesses.</p><p>In summary, see below for a quick list of both the advantages and weaknesses for NodeJS:</p><h2>Advantages</h2><ul><li>Handles high load and concurrent users quickly and cheaply</li><li>Great plugins and time saving code ready to go&nbsp;</li><li>One language to learn and use everywhere... javascript</li><li>Asyncronous code execution by default meaning huge time savings on data loading / sending</li><li>Releasing new code to production easy &amp; flexible</li><li>Easy to learn framework with large fan base, developer base, knowledge base and tutorials</li><li>Flexible and easy to make changes to live systems</li></ul><h2>Weaknesses</h2><ul><li>Slow at executing high computational operations</li><li>So flexible it may lack structure required for less skilled developers</li><li>May require buy-in from your boss / team because it is relatively new on the scene</li></ul><div><br></div><p>All that's left for you to do is to choose a new project, and try out NodeJS!</p><p>This is more about investing in new tech innovation than it is about NodeJS, it just so happens that the new tech innovation is NodeJS.</p><p>I firmly believe you will be quitely surprised with the results - and that's coming from a .NET developer who was very skeptical at first.</p><p>Thanks for reading, leave me you opinions and comments.</p><p><br></p><p>Adam Johnstone</p><p>Adam Johnstone is a disruptive tech innovator, entrepreneur and business owner located in Melbourne, Australia. Skills - NodeJS, .NET, C#, SharePoint.</p><p><br></p>"}]},{"name":"NodeJS vs .NET C# - Why I've adopted both because of their strengths","url":"nodejs-vs-net-c-sharp-why-im-adopting-both-and-a-review-of-their-strengths","properties":[{"name":"meta-description","description":"The meta-description must contain the primary keyword / phrase and be no longer than 156 characters","value":"NodeJS vs .NET C# - I love both platforms, I'm proficient in both. World first view on what the strengths and weaknesses are, the results are shocking!"},{"name":"page-title","description":"The page title must contain the primary keyword / phrase and be no longer than 70 characters","value":"NodeJS vs .NET C# - Why I'm Adopting both and a Solid Review"},{"name":"more-text","description":"","value":"NodeJS vs .NET C# - I love both platforms, I'm proficient in both. This is my world exclusive first view on what the strengths and weaknesses are of both node vs .net.\n                                    Spoiler alert - the results even shocked me!"},{"name":"featured-image","description":"","value":"http://www.hanselman.com/blog/content/binary/Windows-Live-Writer/You-have-more-flexibility-with-software-_BA40/94b3ff4e-cd07-11e3-833c-b0474d25119a_ed266157-f846-4741-9afd-7ee3e91ff93a.png"},{"name":"author","description":"","value":"Adam Johnstone"},{"name":"publish-date","description":"","value":"9:00pm 24/8/2015"}],"contents":[{"name":"article-text","value":"<h1>Setting the Arena - what you need to know</h1><p>Setting the Scene - Tell them what I'm going to tell them</p><p>adsfasdfdsafdsfads</p><h1>NodeJS vs .NET C#</h1><p>NodeJS Strengths</p><p>NodeJS Weakneses</p><p>.NET C# Strengths</p><p>.NET C# Weaknesses</p><p><br></p><h1>Summary and Recommendations</h1><p>Summary - What I just told them</p>"}]},{"name":"WiTricity (Wireless Electricity) and the top 3 Reasons it's game changing","url":"witricity-wireless-electricity-and-the-top-3-reasons-its-game-changing","contents":[{"name":"article-text","value":""}],"properties":[{"name":"meta-description","description":"The meta-description must contain the primary keyword / phrase and be no longer than 156 characters","value":"WiTricity is a company with a big vision to bring wireless electricity into mainstream. The health dangers are paramount, but it's worth the risk."},{"name":"page-title","description":"The page title must contain the primary keyword / phrase and be no longer than 70 characters","value":"WiTricity (Wireless Electricity) and the top 3 Reasons it's game changing"},{"name":"more-text","description":"","value":"WiTricity is a company with a big vision to bring wireless electricity into our homes and hearts. The health dangers and concerns are important - but I have 3 reasons why it's worth taking the risk and what ideas I have for it's practical use."},{"name":"featured-image","description":"","value":"/images/witricity.png"},{"name":"author","description":"","value":"Adam Johnstone"},{"name":"publish-date","description":"","value":"5:30pm 3/9/2015"}]},{"name":"Bootstrap 4 News and a Recap on 8 things Bootstrap is awesome at doing","url":"bootstrap-4-news-8-things-bootstrap-is-awesome-at-doing","contents":[{"name":"article-text","value":"<h1>Bootstrap 4 - A new Alpha Approaches</h1><p>The first alpha release of Bootstrap 4 was announced on 19th August 2015 (see&nbsp;<a href=\"http://blog.getbootstrap.com/2015/08/19/bootstrap-4-alpha\" rel=\"nofollow\" target=\"_blank\">http://blog.getbootstrap.com/2015/08/19/bootstrap-4-alpha</a>) and came with a promo video as well.</p><p><br></p><p><br></p><p><br></p>"}],"properties":[{"name":"meta-description","description":"The meta-description must contain the primary keyword / phrase and be no longer than 156 characters","value":"Bootstrap 4 is almost here. As a tool for Web UI, let's recap on the 8 things that Bootstrap is awesome at doing"},{"name":"page-title","description":"The page title must contain the primary keyword / phrase and be no longer than 70 characters","value":"Bootstrap 4 News and a Recap on 8 things Bootstrap is awesome at doing"},{"name":"more-text","description":"","value":"Bootstrap 4 is almost here. \n                                    As a tool for Web UI, let's recap on the 8 things that Bootstrap is awesome at doing"},{"name":"featured-image","description":"","value":"/images/bootstrap-4-news.png"},{"name":"author","description":"","value":"Adam Johnstone"},{"name":"publish-date","description":"","value":"8:02pm September 10th 2015"}]}]}